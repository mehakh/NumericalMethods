{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNGsaLqiYq7S0LlvuSl3wwH",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/mehakh/NumericalMethods/blob/main/Lab4try\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "id": "39NIUdo3pcP6",
        "outputId": "1063b1b0-5e72-477d-aea9-0171f2b23260"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'v')"
            ]
          },
          "metadata": {},
          "execution_count": 16
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from scipy.integrate import odeint\n",
        "\n",
        "def df(v, t, m, g, k):\n",
        "  return ((m*g)-(k*(v*v)))/m\n",
        "\n",
        "v = 60\n",
        "m = 0.6\n",
        "g = 9.8\n",
        "k = 0.065\n",
        "Tmax = 10\n",
        "\n",
        "ttt = np.linspace(0, Tmax, 100)\n",
        "sol = odeint(df, v, ttt, args = (m, g, k))\n",
        "plt.plot(ttt, sol, label = \"standard solution\", linewidth = 2   )\n",
        "\n",
        "DT = [0.0025, 0.005, 0.01, 0.02, 0.04, 0.08]\n",
        "\n",
        "for dt in DT:\n",
        "  n_iterations = int(Tmax/dt)\n",
        "  T = np.zeros((n_iterations +1, 1))\n",
        "  Y = np.zeros_like(T)\n",
        "  Y[0] = v\n",
        "  for i in range(n_iterations):\n",
        "    t = i*dt\n",
        "    y = Y[i]\n",
        "    y = y + dt*df(y, t, m, g, k)\n",
        "    Y[i+1] = y\n",
        "    T[i+1] = (i+1)*dt\n",
        "\n",
        "  plt.plot(T, Y, label = str(dt))\n",
        "\n",
        "plt.legend()\n",
        "plt.xlabel('t')\n",
        "plt.ylabel('v')\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "mLQihNorqKHg"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}